{"version":3,"file":"main.js","mappings":"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","sources":["webpack://freeroom/./src/index.ts","webpack://freeroom/webpack/startup"],"sourcesContent":["interface MetaResponse {\r\n    status: number;\r\n    type: string;\r\n    message: unknown|null;\r\n    errors: unknown|null;\r\n    datetime: unknown|null;\r\n};\r\ntype JSONStringProperties = string;\r\ntype JSONStringOpenClassroom = string;\r\ninterface Features {\r\n    type: string;\r\n    properties: {\r\n        buildingId: string;\r\n        buildingCode: string;\r\n        buildingName: string;\r\n        parentBuildingCode: string|null;\r\n        alternateBuildingNames: string|null;\r\n        building_sections: string|null;\r\n        youtube_vid: string|null;\r\n        streamable_vid: string|null;\r\n        rawPropertiesStr: JSONStringProperties;\r\n        supportOpenClassroom: boolean;\r\n        openClassroomSlots: JSONStringOpenClassroom;\r\n        building_id: string;\r\n        building_code: string;\r\n        building_name: string;\r\n        building_parent: string|null;\r\n    };\r\n    geometry: {\r\n        coordinates: number[];\r\n        type: string;\r\n    }\r\n};\r\ninterface DataResponse {\r\n    meta: unknown|null;\r\n    type: string;\r\n    features: Features[];\r\n};\r\ninterface ApiResponse {\r\n    meta: MetaResponse;\r\n    data: DataResponse;\r\n};\r\ntype Weekday = \"Monday\"|\"Tuesday\"|\"Wednesday\"|\"Thursday\"|\"Friday\"|\"Saturday\"|\"Sunday\";\r\ninterface Slot {\r\n    StartTime: string;\r\n    EndTime: string;\r\n};\r\ninterface OpenScheduleInfo {\r\n    Weekday: Weekday;\r\n    Slots: Slot[];\r\n};\r\ninterface OpenRoomInfo {\r\n    roomNumber: string;\r\n    buildingCode: string;\r\n    GeneratedTime: string;\r\n    Schedule: OpenScheduleInfo[];\r\n};\r\ninterface OpenClassroomSlots {\r\n    lastUpdated: string;\r\n    data: OpenRoomInfo[];\r\n};\r\n\r\ninterface RoomSlot {\r\n    color: number|null;\r\n    buildingName: string;\r\n    buildingCode: string;\r\n    roomNumber: string;\r\n    StartTime: string;\r\n    EndTime: string;\r\n    startNumber: number;\r\n    endNumber: number;\r\n};\r\ninterface BuildingClassrooms {\r\n    name: string;\r\n    code: string;\r\n    weeklySlots: Map<Weekday, RoomSlot[]>;\r\n};\r\nconst getTimeString = (time: string): string => {\r\n    let [ hour, minute ] = time.split(\":\").map(el => parseInt(el));\r\n    const period = hour >= 12 ? \"PM\" : \"AM\";\r\n    if (hour >= 13) {\r\n        hour -= 12;\r\n    }\r\n    return `${hour}:${String(minute).padStart(2, \"0\")} ${period}`;\r\n}\r\nconst AVAILABLE_DAYS = new Set<Weekday>();\r\nconst AVAILABLE_BUILDINGS = new Set<string>();\r\nconst BUILDING_OPENCLASSROOMS = new Map<string, BuildingClassrooms>();\r\ninterface ColorInformation {\r\n    accent: string;\r\n    light: string;\r\n};\r\nconst BUILDING_COLORS = new Map<string, ColorInformation>();\r\nconst randomColorInformation = (): ColorInformation => {\r\n    const basecolor = Math.floor((360 * Math.random()));\r\n    return {\r\n        accent: `hsla(${basecolor}, 70%,  70%, 0.8)`,\r\n        light: `hsla(${basecolor}, 70%,  70%, 0.5)`\r\n    };\r\n}\r\nconst generateColor = (buildingName: string): void => {\r\n    if (!BUILDING_COLORS.has(buildingName)) {\r\n        BUILDING_COLORS.set(buildingName, randomColorInformation());\r\n    }\r\n}\r\n\r\ninterface Constants {\r\n    PIXELS_PER_HOUR: number|null;\r\n    INITIAL_PIXELS: number|null;\r\n    SLOT_WIDTH: number;\r\n    RIGHT_MARGIN: number;\r\n    BLOCK_CONTAINER: HTMLElement|null;\r\n    SELECT_BUILDING: HTMLSelectElement|null;\r\n    SELECT_WEEKDAY: HTMLSelectElement|null\r\n};\r\nconst CONSTANTS: Constants = {\r\n    PIXELS_PER_HOUR: null,\r\n    INITIAL_PIXELS: null,\r\n    SLOT_WIDTH: 175,\r\n    RIGHT_MARGIN: 5,\r\n    BLOCK_CONTAINER: null,\r\n    SELECT_BUILDING: null,\r\n    SELECT_WEEKDAY: null,\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst url = String.raw`https://portalapi2.uwaterloo.ca/v2/map/OpenClassrooms`;\r\nconst getResponse = async (): Promise<ApiResponse> => {\r\n    try {\r\n        const res = await fetch(url, {\r\n            credentials: \"include\",\r\n            method: \"GET\"\r\n        });\r\n        return await res.json();\r\n    } catch (e) {\r\n        alert(\"Could not get data from API.\");\r\n        throw e;\r\n    }\r\n};\r\nconst parseOpenClassroomSlots = (data: string): OpenClassroomSlots => {\r\n    return JSON.parse(data) as OpenClassroomSlots;\r\n};\r\n\r\nconst htmlTemplate = (\r\n    top: number, \r\n    height: number, \r\n    left: number,\r\n    color: string,\r\n    building: string,\r\n    buildingCode: string,\r\n    roomNumber: string,\r\n    startTime: string,\r\n    endTime: string\r\n): string => {\r\n    return `\r\n    <div class=\"slot-block\" style=\"background-color: ${color}; top: ${top}px; height: ${height}px; left: ${left}px;\">\r\n        <div class=\"slot-block-inner\">\r\n            <span>${buildingCode} ${roomNumber}</span>\r\n            <span>${startTime} to ${endTime}</span>\r\n            <span>${building}</span>\r\n        </div>\r\n    </div>\r\n    `;\r\n}\r\n\r\nconst renderSlots = (\r\n    selectedDaysOfWeek: Weekday[], \r\n    selectedBuildings: Set<string>\r\n): void => {\r\n    const INITIAL_PIXELS = CONSTANTS.INITIAL_PIXELS;\r\n    if (INITIAL_PIXELS === null) {\r\n        throw new Error(\"Failed rendering, could not get INITIAL_PIXELS.\");\r\n    }\r\n    const PIXELS_PER_HOUR = CONSTANTS.PIXELS_PER_HOUR;\r\n    if (PIXELS_PER_HOUR === null) {\r\n        throw new Error(\"Failed rendering, could not get PIXELS_PER_HOUR.\");\r\n    }\r\n    const BLOCK_CONTAINER = CONSTANTS.BLOCK_CONTAINER;\r\n    if (BLOCK_CONTAINER === null) {\r\n        throw new Error(\"Failed rending, could not find BLOCK_CONATINER.\");\r\n    }\r\n    BLOCK_CONTAINER.innerHTML = \"\";\r\n\r\n    // If no rooms are selected, get them all.\r\n    const hasSelectedRooms = selectedBuildings.size !== 0;\r\n    const intervals: RoomSlot[] = [];\r\n\r\n    // Get intervals based on citeria.\r\n    for (const entry of BUILDING_OPENCLASSROOMS.entries()) {\r\n        if (hasSelectedRooms && !selectedBuildings.has(entry[0])) {\r\n            continue;\r\n        }\r\n        for (const weekday of selectedDaysOfWeek) {\r\n            const slots = entry[1].weeklySlots.get(weekday);\r\n            if (slots === undefined) {\r\n                console.log(\"The building\", entry[0], \"has no available rooms on\", weekday.toLowerCase(), \"due to undefined value.\");\r\n                continue;\r\n            }\r\n            if (slots.length === 0) {\r\n                console.log(\"The building\", entry[0], \"has no available rooms on\", weekday.toLowerCase(), \"due to array of length 0.\");\r\n                continue;\r\n            }\r\n            for (const slot of slots) {\r\n                intervals.push(slot);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (intervals.length === 0) {\r\n        console.log(\"No intervals to render. Received:\", selectedDaysOfWeek, selectedBuildings);\r\n        return;\r\n    }\r\n\r\n    // Sort the intervals by increasing start time.\r\n    const sortedIntervals = intervals.sort((a, b) => {\r\n        if (a.startNumber < b.startNumber) {\r\n            return -1;\r\n        } else if (a.startNumber > b.startNumber) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    // Interval Coloring algorithm from CS341.\r\n    // We use interval coloring to determine which column to use.\r\n    let d = 1;\r\n    sortedIntervals[0].color = d;\r\n    const finish = [ sortedIntervals[0].endNumber ];\r\n    for (let i = 0; i < sortedIntervals.length; i++) {\r\n        let reused = false;\r\n        for (let c = 1; c <= d; c++) {\r\n            if (finish[c] <= sortedIntervals[i].startNumber) {\r\n                sortedIntervals[i].color = c;\r\n                finish[c] = sortedIntervals[i].endNumber;\r\n                reused = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!reused) {\r\n            d += 1;\r\n            sortedIntervals[i].color = d;\r\n            finish[d] = sortedIntervals[i].endNumber;\r\n        }\r\n    }\r\n\r\n    // Draw the intervals\r\n    for (const interval of sortedIntervals) {\r\n        const [ startHour, startMinute ] = interval.StartTime.split(\":\").map(el => parseInt(el));\r\n        const [ endHour, endMinute ] = interval.EndTime.split(\":\").map(el => parseInt(el));\r\n        if (interval.color === null) {\r\n            throw new Error(\"Failed rendering, interval was not colored.\");\r\n        }\r\n        const top = INITIAL_PIXELS + (startHour - 8 + startMinute/60) * PIXELS_PER_HOUR;\r\n        const height = PIXELS_PER_HOUR * ((endHour - startHour) + (endMinute - startMinute)/60);\r\n        const left = (interval.color - 2) * (CONSTANTS.SLOT_WIDTH + CONSTANTS.RIGHT_MARGIN);\r\n        const color = BUILDING_COLORS.get(interval.buildingName) ?? randomColorInformation();\r\n        const html = htmlTemplate(\r\n            Math.floor(top), \r\n            Math.ceil(height), \r\n            Math.round(left),\r\n            color.accent,\r\n            interval.buildingName, \r\n            interval.buildingCode,\r\n            interval.roomNumber,\r\n            getTimeString(interval.StartTime),\r\n            getTimeString(interval.EndTime)\r\n        );\r\n        BLOCK_CONTAINER.insertAdjacentHTML(\"afterbegin\", html);\r\n    }\r\n}\r\n\r\nconst startupRender = (): void => {\r\n    if (CONSTANTS.SELECT_BUILDING === null) {\r\n        throw new Error(\"Could not find building selector.\");\r\n    }\r\n    if (CONSTANTS.SELECT_WEEKDAY === null) {\r\n        throw new Error(\"Could not find weekday selector.\");\r\n    }\r\n    CONSTANTS.SELECT_BUILDING.insertAdjacentHTML(\"afterbegin\", `<option value=\"---\">--- any ---</option>`)\r\n    for (const building of AVAILABLE_BUILDINGS) {\r\n        const html = `<option value=\"${building}\">${building}</option>`;\r\n        CONSTANTS.SELECT_BUILDING.insertAdjacentHTML(\"afterbegin\", html)\r\n    }\r\n    for (const day of AVAILABLE_DAYS) {\r\n        const html = `<option value=\"${day}\">${day}</option>`;\r\n        CONSTANTS.SELECT_WEEKDAY.insertAdjacentHTML(\"afterbegin\", html)\r\n    }\r\n    CONSTANTS.SELECT_BUILDING.addEventListener(\"change\", function () {\r\n        const w = CONSTANTS.SELECT_WEEKDAY?.value;\r\n        if (w === undefined) {\r\n            throw new Error(\"Could not get selected weekday.\");\r\n        }\r\n        if (this.value === \"---\") {\r\n            renderSlots([w as Weekday], new Set());\r\n        } else {\r\n            renderSlots([w as Weekday], new Set([this.value]));\r\n        }\r\n    });\r\n    CONSTANTS.SELECT_WEEKDAY.addEventListener(\"change\", function () {\r\n        const w = CONSTANTS.SELECT_BUILDING?.value;\r\n        if (w === undefined) {\r\n            throw new Error(\"Could not get selected weekday.\");\r\n        }\r\n        if (w === \"---\") {\r\n            renderSlots([this.value as Weekday], new Set());\r\n        } else {\r\n            renderSlots([this.value as Weekday], new Set([w]));\r\n        }\r\n    });\r\n\r\n    const firstDay = CONSTANTS.SELECT_WEEKDAY.value as Weekday;\r\n    renderSlots([firstDay], new Set());\r\n}\r\n\r\nvoid (async function() {\r\n    const response: ApiResponse = await getResponse();\r\n    if (response.meta.status !== 200) {\r\n        console.error(response.meta);\r\n        throw new Error(\"Response was not status code 200.\");\r\n    }\r\n\r\n    for (const building of response.data.features) {\r\n        const props = building.properties;\r\n        const buildingName = props.buildingName;\r\n        const buildingCode = props.buildingCode;\r\n        const supproted = props.supportOpenClassroom;\r\n        if (!supproted) {\r\n            console.log(`The building ${buildingName} does not support OpenClassroom.`);\r\n            continue;\r\n        }\r\n        AVAILABLE_BUILDINGS.add(buildingName);\r\n        const openClassroomSlots = parseOpenClassroomSlots(props.openClassroomSlots);\r\n        const buildingClassrooms: BuildingClassrooms = {\r\n            name: buildingName,\r\n            code: buildingCode,\r\n            weeklySlots: new Map()\r\n        };\r\n        for (const openRoomInfo of openClassroomSlots.data) {\r\n            const roomNumber = openRoomInfo.roomNumber;\r\n            for (const schedule of openRoomInfo.Schedule) {\r\n                const weekday = schedule.Weekday;\r\n                AVAILABLE_DAYS.add(weekday);\r\n                for (const slot of schedule.Slots) {\r\n                    const map = buildingClassrooms.weeklySlots;\r\n                    if (!map.has(weekday)) {\r\n                        map.set(weekday, []);\r\n                    } else {\r\n                        map.get(weekday)?.push({\r\n                            color: null,\r\n                            buildingName,\r\n                            buildingCode,\r\n                            roomNumber,\r\n                            StartTime: slot.StartTime,\r\n                            EndTime: slot.EndTime,\r\n                            startNumber: slot.StartTime.split(\":\").reduce((accumulator, currentValue) => accumulator * 100 + Number(currentValue), 0),\r\n                            endNumber: slot.EndTime.split(\":\").reduce((accumulator, currentValue) => accumulator * 100 + Number(currentValue), 0),\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        generateColor(buildingName);\r\n        BUILDING_OPENCLASSROOMS.set(buildingName, buildingClassrooms);\r\n    }\r\n    startupRender();\r\n})();\r\n\r\nconst sleep = async (ms: number): Promise<void> => { \r\n    await new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\nconst clamp = (num: number, min: number, max: number): number => {\r\n    return Math.min(Math.max(num, min), max);\r\n};\r\nconst moveTimePointer = async (): Promise<void> => {\r\n    const INITIAL_PIXELS = CONSTANTS.INITIAL_PIXELS;\r\n    if (INITIAL_PIXELS === null) {\r\n        throw new Error(\"Failed moving time pointer, could not get INITIAL_PIXELS.\");\r\n    }\r\n    const PIXELS_PER_HOUR = CONSTANTS.PIXELS_PER_HOUR;\r\n    if (PIXELS_PER_HOUR === null) {\r\n        throw new Error(\"Failed moving time pointer, could not get PIXELS_PER_HOUR.\");\r\n    }\r\n    const timePointer: HTMLDivElement|null = document.querySelector(\"div.time-pointer\");\r\n    if (timePointer === null) {\r\n        throw new Error(\"Cannot find time-pointer.\");\r\n    }\r\n    const timeSpan = timePointer.querySelector(\"span\");\r\n    if (timeSpan === null) {\r\n        throw new Error(\"Cannot find time-span indicator.\");\r\n    }\r\n    const formatter = new Intl.DateTimeFormat([], { \r\n        timeZone: \"America/Toronto\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        hourCycle: \"h24\"\r\n    });\r\n    const tpMidPoint = timePointer.getBoundingClientRect().height/2;\r\n    while (true) {\r\n        const timeText = formatter.format(new Date());\r\n        const [ hour, minute ] = timeText.split(\":\").map(el => parseInt(el));\r\n        const top = (hour - 8 + minute/60) * PIXELS_PER_HOUR + INITIAL_PIXELS - tpMidPoint;\r\n        const clamped = clamp(top, INITIAL_PIXELS/2 - 1, 761);\r\n        timePointer.style.setProperty(\"top\", `${clamped}px`);\r\n        timeSpan.innerText = getTimeString(timeText);\r\n        await sleep(1 * 60 * 1000); // Wait 1 minute\r\n    }\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const PIXELS_PER_HOUR = document.querySelector(\"div.day-time>div.time-row\")?.getBoundingClientRect().height;\r\n    if (PIXELS_PER_HOUR === undefined) {\r\n        throw new Error(\"Could not find required div.time-row HTMLElement.\");\r\n    }\r\n    CONSTANTS.PIXELS_PER_HOUR = PIXELS_PER_HOUR;\r\n    CONSTANTS.INITIAL_PIXELS = PIXELS_PER_HOUR/2;\r\n    CONSTANTS.BLOCK_CONTAINER = document.querySelector(\"div.day-blocks>div.block-container\");\r\n    CONSTANTS.SELECT_BUILDING = document.querySelector(\"select#buildings-selector\");\r\n    CONSTANTS.SELECT_WEEKDAY = document.querySelector(\"select#weekday-selector\");\r\n    void moveTimePointer();\r\n});","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[607]();\n"],"names":["getTimeString","time","hour","minute","split","map","el","parseInt","period","String","padStart","AVAILABLE_DAYS","Set","AVAILABLE_BUILDINGS","BUILDING_OPENCLASSROOMS","Map","BUILDING_COLORS","randomColorInformation","basecolor","Math","floor","random","accent","light","generateColor","buildingName","has","set","CONSTANTS","PIXELS_PER_HOUR","INITIAL_PIXELS","SLOT_WIDTH","RIGHT_MARGIN","BLOCK_CONTAINER","SELECT_BUILDING","SELECT_WEEKDAY","url","raw","getResponse","res","fetch","credentials","method","json","e","alert","htmlTemplate","top","height","left","color","building","buildingCode","roomNumber","startTime","endTime","renderSlots","selectedDaysOfWeek","selectedBuildings","Error","innerHTML","hasSelectedRooms","size","intervals","entry","entries","weekday","slots","weeklySlots","get","undefined","length","slot","push","console","log","toLowerCase","sortedIntervals","sort","a","b","startNumber","d","finish","endNumber","i","reused","c","interval","startHour","startMinute","StartTime","endHour","endMinute","EndTime","html","ceil","round","insertAdjacentHTML","startupRender","day","addEventListener","w","value","this","firstDay","response","meta","status","error","data","features","props","properties","supportOpenClassroom","add","openClassroomSlots","JSON","parse","buildingClassrooms","name","code","openRoomInfo","schedule","Schedule","Weekday","Slots","reduce","accumulator","currentValue","Number","sleep","ms","Promise","resolve","setTimeout","moveTimePointer","timePointer","document","querySelector","timeSpan","formatter","Intl","DateTimeFormat","timeZone","hourCycle","tpMidPoint","getBoundingClientRect","timeText","format","Date","clamped","num","min","max","style","setProperty","innerText","window"],"sourceRoot":""}